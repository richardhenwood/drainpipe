package org.neuralyte.drainpipe;

//import ibxm.IBXM;
import ibxm.Instrument;
import ibxm.Module;
import ibxm.Player;

//import java.io.File;
//import java.io.FileInputStream;
import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.URL;
import java.net.URLConnection;
import java.util.Vector;

import javax.sound.sampled.LineUnavailableException;

//import javax.sound.sampled.LineUnavailableException;

public class Tracker implements Runnable {

	final int SAMPLE_RATE = 44100;
//	public static ibxm.Player player;
	private URL songFile = null;
	private int interpolation, duration, samplePos;
    //private IBXM ibxm;
	private Player player;
	
   // private JList instrumentList;

	//private String outfile = null;


	// Private constructor prevents instantiation from other classes
	private Tracker() {
		System.out.println("this shouldn't be caled.");
		/*try {
			player = new ibxm.Player();
		} catch (LineUnavailableException e) {
			e.printStackTrace();
		}*/
	}

	/**
	 * SingletonHolder is loaded on the first execution of Singleton.getInstance() 
	 * or the first access to SingletonHolder.INSTANCE, not before.
	 */
	private static class SingletonHolder { 
		public static final Tracker INSTANCE = new Tracker();
	}

	public static Tracker getInstance() {
		return SingletonHolder.INSTANCE;
	}

	public void play () {
		player.play();
	}

	public void playPattern (int patNo) {
		player.playPattern(patNo);
	}

	
	public String getSongName () throws IOException {
		String path = "Unknown!";
		path = this.songFile.getPath();
		return path;
	}

	public void loadModule( URL modfile ) throws IOException {
		this.songFile = modfile;
		System.out.println("loading mod: " + songFile);		
		
		URLConnection con = modfile.openConnection();
		con.connect();
		System.out.println("content length: " + con.getContentLength());
		byte[] moduleData = new byte[con.getContentLength()];
		
		InputStream in = con.getInputStream();
		DataInputStream modStream = new DataInputStream(in);
		
		modStream.readFully(moduleData);
		
		in.close();
		
        Module module = new Module( moduleData );
        try {
			player = new Player(SAMPLE_RATE);
			player.setInterpolation(interpolation);
			player.loadModule(module);
        //ibxm = new IBXM( module, SAMPLE_RATE );
        //ibxm.setInterpolation( interpolation );
			duration = player.calculateSongDuration();
			samplePos = 0;
        /*seekSlider.setMinimum( 0 );
        seekSlider.setMaximum( duration );
        seekSlider.setValue( 0 );
        songLabel.setText( module.songName.trim() );*/
  /*      Vector<String> vector = new Vector<String>();
        Instrument[] instruments = module.instruments;
        for( int idx = 0, len = instruments.length; idx < len; idx++ ) {
                String name = instruments[ idx ].name;
                if( name.trim().length() > 0 )
                        vector.add( String.format( "%03d: %s", idx, name ) );
        }
        instrumentList.setListData( vector );
*/
		
		
//		player.setModule( ibxm.Player.loadModule( urlfs ) );
		//urlfs.close();
        
		} catch (LineUnavailableException e) {
			System.out.println("can't start player.");
			e.printStackTrace();
		}
	}
	
	public Player getPlayer() {
		return player;
	}
	
    public synchronized void stop() {
    	player.stop();
  /*      playing = false;
        try {
                if( playThread != null ) playThread.join();
        } catch( InterruptedException e ) {
        }*/
 /*       updateTimer.stop();
        playButton.setText( "Play" );*/
}

private synchronized void seek( int pos ) {
        samplePos = player.seek( pos );
}

private synchronized void setInterpolation( int interpolation ) {
        this.interpolation = interpolation;
        if( player != null ) player.setInterpolation( interpolation );
}

	public void restart() {
		this.seek(0);
		//player.restart();
		// TODO Auto-generated method stub
		
	}

	public void run() {
		// TODO Auto-generated method stub
		
	}

}
